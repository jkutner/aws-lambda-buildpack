#!/usr/bin/env bash

set -eu

layers_dir="$1"
env_dir="$2/env"
plan_path="$3"

if compgen -G "${env_dir}/*" > /dev/null; then
  for var in ${env_dir}/*; do
    declare "$(basename ${var})=$(<${var})"
  done
fi

######################
# install runtime
######################
runtime_layer=$layers_dir/runtime
mkdir -p $runtime_layer
echo "Installing Lambda Runtime Interface Client for Node.js"

# TODO need to cache these some how
npm install aws-lambda-ric npx --save

echo "$runtime_layer" > $runtime_layer/env/NODE_PATH

######################
# install emulator
######################

# The version of https://github.com/aws/aws-lambda-base-images/tree/nodejs12.x
base_sha="7411b1a0ea52fd1cdca24bb089b653c646946da8"
layer_sha="dc3f98662c3ce8a51a7a5c01bf9a57b51744bb5c5b7a57db096b62dc6e90386c"

rie_layer=$layers_dir/rie
mkdir -p $rie_layer
echo "Installing Lambda Emulator"
curl -sL --retry 3 \
  "https://github.com/aws/aws-lambda-base-images/raw/${base_sha}/${layer_sha}.tar.xz" \
  | tar xJ -C $rie_layer/
echo "launch = true" > ${rie_layer}.toml

######################
# install entrypoint
######################
entrypoint_layer=$layers_dir/entrypoint
mkdir -p $entrypoint_layer/bin
echo "Installing Lambda Entrypoint"

cat <<EOF > ${entrypoint_layer}/bin/lambda-entrypoint
#!/bin/bash

RUNTIME_ENTRYPOINT="./bootstrap"
if [ -z "\${AWS_LAMBDA_RUNTIME_API}" ]; then
  exec ${rie_layer}/usr/local/bin/aws-lambda-rie \$RUNTIME_ENTRYPOINT
else
  exec \$RUNTIME_ENTRYPOINT
fi
EOF
chmod +x ${entrypoint_layer}/bin/lambda-entrypoint
echo "launch = true" > ${entrypoint_layer}.toml
echo "cache = true" >> ${entrypoint_layer}.toml

cat <<EOF > ${layers_dir}/launch.toml
[[processes]]
type = "web"
command = "lambda-entrypoint"

[[processes]]
type = "bash"
command = "/bin/bash"
EOF

######################
# install bootstrap
######################
cat <<EOF > bootstrap
#!/bin/bash

if [ -n "\$AWS_LAMBDA_FUNCTION_MEMORY_SIZE" ];
then
  new_space=\$(expr \$AWS_LAMBDA_FUNCTION_MEMORY_SIZE / 10)
  semi_space=\$(expr \$new_space / 2)
  old_space=\$(expr \$AWS_LAMBDA_FUNCTION_MEMORY_SIZE - \$new_space)
  MEMORY_ARGS=(
    "--node-arg=--max-semi-space-size=\$semi_space"
    "--node-arg=--max-old-space-size=\$old_space"
  )
fi

export AWS_EXECUTION_ENV=AWS_Lambda_nodejs12.x

NODE_ARGS=(
    --node-arg=--expose-gc
    --node-arg=--max-http-header-size=81920
    "\${MEMORY_ARGS[@]}"
    )

if [ -z "\$AWS_LAMBDA_EXEC_WRAPPER" ]; then
  exec $(which npx) aws-lambda-ric app.handler
else
  wrapper="\$AWS_LAMBDA_EXEC_WRAPPER"
  if [ ! -f "\$wrapper" ]; then
    echo "\$wrapper: does not exist"
    exit 127
  fi
  if [ ! -x "\$wrapper" ]; then
    echo "\$wrapper: is not an executable"
    exit 126
  fi
  exec -- "\$wrapper" $(which npx) aws-lambda-ric app.handler
fi
EOF
chmod +x bootstrap