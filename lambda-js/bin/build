#!/usr/bin/env bash

set -eu

layers_dir="$1"
env_dir="$2/env"
plan_path="$3"

if compgen -G "${env_dir}/*" > /dev/null; then
  for var in ${env_dir}/*; do
    declare "$(basename ${var})=$(<${var})"
  done
fi

# install runtime
runtime_layer=$layers_dir/runtime
mkdir -p $runtime_layer
echo "Installing Lambda Runtime Interface Client for Node.js"
npm install aws-lambda-ric npx --save

# install emulator
rie_layer=$layers_dir/rie
mkdir -p $rie_layer
echo "Installing Lambda Emulator"
curl -sL --retry 3 \
  "https://github.com/aws/aws-lambda-base-images/raw/nodejs12.x/4ed7d8fa551de49733288f1d275a1edda8627f4488cd9a5d9b2ec439ce9372ca.tar.xz" \
  | tar xJ -C $rie_layer/
echo "launch = true" > ${rie_layer}.toml
echo "cache = true" >> ${rie_layer}.toml


# install entrypoint
entrypoint_layer=$layers_dir/entrypoint
mkdir -p $entrypoint_layer/bin
echo "Installing Lambda Entrypoint"

cat <<EOF > ${entrypoint_layer}/bin/lambda
if [ \$# -ne 1 ]; then
  echo "entrypoint requires the handler name to be the first argument" 1>&2
  exit 142
fi
export _HANDLER="\$1"

RUNTIME_ENTRYPOINT="npx aws-lambda-ric \$_HANDLER"
if [ -z "\${AWS_LAMBDA_RUNTIME_API}" ]; then
  exec ${rie_layer}/usr/local/bin/aws-lambda-rie \$RUNTIME_ENTRYPOINT
else
  exec \$RUNTIME_ENTRYPOINT
fi
EOF
chmod +x ${entrypoint_layer}/bin/lambda
echo "launch = true" > ${entrypoint_layer}.toml
echo "cache = true" >> ${entrypoint_layer}.toml

# create launch.toml
cat <<EOF > ${layers_dir}/launch.toml
[[processes]]
type = "web"
command = "lambda app.handler"

[[processes]]
type = "bash"
command = "/bin/bash"
EOF