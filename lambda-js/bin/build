#!/usr/bin/env bash

set -eu

layers_dir="$1"
env_dir="$2/env"
plan_path="$3"

if compgen -G "${env_dir}/*" > /dev/null; then
  for var in ${env_dir}/*; do
    declare "$(basename ${var})=$(<${var})"
  done
fi

######################
# install runtime
######################
runtime_layer=$layers_dir/runtime
ric_version="1.0.0"

echo ""
echo "[Lambda Runtime Interface Client for Node.js]"

if [ -f ${runtime_layer}.toml ] && [ "$(cat "${runtime_layer}.toml" | yj -t | jq .metadata.version -r)" == "${ric_version}" ]; then
  echo "Using cached version: ${ric_version}"
  touch ${runtime_layer}.toml
else
  echo "Installing version: ${ric_version}"
  mkdir -p $runtime_layer/env
  npm install --prefix $runtime_layer aws-lambda-ric@${ric_version} --save

  echo "$runtime_layer/node_modules" > $runtime_layer/env/NODE_PATH

  cat <<TOML > ${runtime_layer}.toml
launch = true
cache = true

[metadata]
version = "${ric_version}"
TOML
fi

######################
# install emulator
######################

# The versions from https://github.com/aws/aws-lambda-base-images/tree/nodejs12.x
base_sha="7411b1a0ea52fd1cdca24bb089b653c646946da8"
layer_sha="c7af6df05a4deb705597f4ede97ec97644daad5311ae81fce733bbf167fe2ddd"
rie_layer=$layers_dir/rie

echo ""
echo "[AWS Lambda Emulator]"
if [ -f ${rie_layer}.toml ] && [ "$(cat "${rie_layer}.toml" | yj -t | jq .metadata.base_sha -r)" == "${base_sha}" ]; then
  echo "Using cached version: ${base_sha}"
  touch ${rie_layer}.toml
else
  mkdir -p $rie_layer
  echo "Installing version: ${base_sha}"
  curl -sL --retry 3 \
    "https://github.com/aws/aws-lambda-base-images/raw/${base_sha}/${layer_sha}.tar.xz" \
    | tar xJ -C $rie_layer/
  cat <<TOML > ${rie_layer}.toml
launch = true
cache = true

[metadata]
base_sha = "${base_sha}"
layer_sha = "${layer_sha}"
TOML
fi

# TODO store the shas in metadata and cache

######################
# install entrypoint
######################
entrypoint_layer=$layers_dir/entrypoint
mkdir -p $entrypoint_layer/bin

echo ""
echo "[AWS Lambda Launch Config]"

echo "Installing entrypoint script"
cat <<EOF > ${entrypoint_layer}/bin/lambda-entrypoint
#!/bin/bash

RUNTIME_ENTRYPOINT="./bootstrap"
if [ -z "\${AWS_LAMBDA_RUNTIME_API}" ]; then
  exec ${rie_layer}/usr/local/bin/aws-lambda-rie \$RUNTIME_ENTRYPOINT
else
  exec \$RUNTIME_ENTRYPOINT
fi
EOF
chmod +x ${entrypoint_layer}/bin/lambda-entrypoint
echo "launch = true" > ${entrypoint_layer}.toml

cat <<EOF > ${layers_dir}/launch.toml
[[processes]]
type = "web"
command = "lambda-entrypoint"

[[processes]]
type = "bash"
command = "/bin/bash"
EOF

######################
# install bootstrap
######################
echo "Installing bootstrap script"
cp $CNB_BUILDPACK_DIR/sbin/bootstrap bootstrap
chmod +x bootstrap